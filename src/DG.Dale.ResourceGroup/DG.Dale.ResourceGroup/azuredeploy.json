{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "serviceplanSKU": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Free",
        "Shared",
        "Basic",
        "Standard",
        "Premium"
      ]
    },
    "baseUrl": {
      "type": "string"
    },
    "serviceplanWorkerSize": {
      "type": "string",
      "allowedValues": [
        "0",
        "1",
        "2"
      ],
      "defaultValue": "0"
    },
    "farmPlan": {
      "type": "string",
      "allowedValues": [
        "Dynamic",
        "Standard"
      ],
      "defaultValue": "Dynamic"
    }
  },
  "variables": {
    "storageAccountName": "[concat('dalestorage', uniqueString(resourceGroup().id))]",
    "functionAppName": "[concat('dalefunctions', uniqueString(resourceGroup().id))]",
    "serviceplanName": "[concat(tolower(parameters('farmPlan')),'dalefarm',uniqueString(resourceGroup().id))]",
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2016-01-01",
      "location": "[resourceGroup().location]",
      "properties": { }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2015-04-01",
      "location": "[resourceGroup().location]",
      "name": "[variables('serviceplanName')]",
      "properties": {
        "templateLink": {
          "uri": "[concat(parameters('baseUrl'),tolower(parameters('farmPlan')),'dalefarm.json')]",
          "contentVersion": "1.0.0.0"
        },
        "computeMode": "[parameters('farmPlan')]",
        "sku": "[parameters('farmPlan')]"

      }
    },

    {
      "name": "[variables('functionAppName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "apiVersion": "2015-08-01",
      "properties": {
        "name": "[variables('functionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('serviceplanName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('serviceplanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],

      "resources": [
        {
          "name": "appsettings",
          "type": "config",
          "apiVersion": "2015-08-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', variables('functionAppName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
          ],
          "properties": {
            "AzureWebJobsStorage": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]",
            "AzureWebJobsDashboard": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,';')]",
            "FUNCTIONS_EXTENSION_VERSION": "latest"
          }
        },
        {
          "apiVersion": "2015-08-01",
          "name": "Notify",
          "type": "functions",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
          ],
          "properties": {
            "config": {
              "bindings": [
                {
                  "authLevel": "anonymous",
                  "name": "req",
                  "type": "httpTrigger",
                  "direction": "in"
                },
                {
                  "name": "res",
                  "type": "http",
                  "direction": "out"
                }
              ]
            },
            "files": {
              "run.csx": "using System.Net;\r\nusing System.Configuration;\r\nusing System.Net.Http;\r\nusing Newtonsoft.Json;\r\nusing Dale;\r\npublic static HttpResponseMessage Run(HttpRequestMessage req, TraceWriter log)\r\n{\r\n    log.Info( \"Received message: \");\r\n    log.Info(req.Content.ReadAsStringAsync().Result);\r\n    log.Info(\"EOF\");\r\n\r\n    var conf = Dale.Config.Create(\r\n      ConfigurationManager.AppSettings[\"Tenant\"],\r\n      ConfigurationManager.AppSettings[\"ClientId\"],\r\n      ConfigurationManager.AppSettings[\"ClientSecret\"],\r\n      ConfigurationManager.AppSettings[\"AzureConnectionString\"],\r\n      ConfigurationManager.AppSettings[\"AzureQueueName\"],\r\n      ConfigurationManager.AppSettings[\"RedactedFields\"]);\r\n\r\n    return new Dale.Exporter(conf).Handle(req);\r\n}"
            }
          }
        },
        {
          "apiVersion": "2015-08-01",
          "name": "ReadQueue",
          "type": "functions",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
          ],
          "properties": {
            "config": {
              "bindings": [
                {
                  "authLevel": "anonymous",
                  "name": "req",
                  "type": "httpTrigger",
                  "direction": "in"
                },
                {
                  "name": "res",
                  "type": "http",
                  "direction": "out"
                }
              ]
            },
            "files": {
              "run.csx": "using System.Net;\r\nusing System.Configuration;\r\nusing Microsoft.Azure.WebJobs.Host;\r\nusing FSharp.Azure.Storage;\r\nusing Dale;\r\npublic static void Run(string message, TraceWriter log)\r\n{\r\n    log.Info(\"Processing batch : \" + message);\r\n\r\n    var conf = Dale.Config.Create(\r\n      ConfigurationManager.AppSettings[\"Tenant\"],\r\n      ConfigurationManager.AppSettings[\"ClientId\"],\r\n      ConfigurationManager.AppSettings[\"ClientSecret\"],\r\n      ConfigurationManager.AppSettings[\"AzureConnectionString\"],\r\n      ConfigurationManager.AppSettings[\"AzureQueueName\"],\r\n      ConfigurationManager.AppSettings[\"RedactedFields\"]);\r\n\r\n    var res = new Dale.Exporter(conf).ExportWithException(message);\r\n    foreach(string s in res) {\r\n      log.Info(s);\r\n    }\r\n}"
            }
          }
        },
        {
          "apiVersion": "2015-08-01",
          "name": "Subscribe",
          "type": "functions",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
          ],
          "properties": {
            "config": {
              "bindings": [
                {
                  "authLevel": "anonymous",
                  "name": "req",
                  "type": "httpTrigger",
                  "direction": "in"
                },
                {
                  "name": "res",
                  "type": "http",
                  "direction": "out"
                }
              ]
            },
            "files": {
              "run.fsx": "open System\r\nopen System.Configuration\r\nopen FSharp.Data\r\nopen FSharp.Data.HttpRequestHeaders\r\nopen JWT\r\n\r\nlet fetchAuthToken clientId clientSecret tenant =\r\n  let url = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/token\"\r\n  let json =\r\n    Http.RequestString(url,\r\n                       headers=[Accept \"application/json\"],\r\n                       body=FormValues [\"grant_type\", \"client_credentials\";\r\n                                         \"client_id\", clientId;\r\n                                         \"client_secret\", clientSecret;\r\n                                         \"resource\", \"https://manage.office.com\"])\r\n\r\n  let res = JsonValue.Parse json\r\n  let token = res.GetProperty(\"access_token\").AsString()\r\n  token\r\n\r\n\r\nlet subscribe (log :TraceWriter) webhook authId tenantId token contentType =\r\n  let url = \"https://manage.office.com/api/v1.0/\" + tenantId +\r\n            \"/activity/feed/subscriptions/start\"\r\n  let reqbody =\r\n   \"{'webhook': {\"  +\r\n      \"'address': '\" + webhook + \"', \" +\r\n      \"'authId': '\" + authId + \"', \" +\r\n      \"'expiration': ''\" +\r\n      \"}}\"\r\n\r\n  let resp =\r\n    Http.Request(url,\r\n                 headers = [Accept \"application/json\";\r\n                            Authorization token;\r\n                            ContentType HttpContentTypes.Json],\r\n                 query = [\"contentType\", contentType],\r\n                 body = TextRequest reqbody)\r\n  log.Info(sprintf \"Subscribing to %s: HTTP %i\" contentType resp.StatusCode)\r\n\r\n\r\nlet Run(input: string, log: TraceWriter) =\r\n  let tenant = Environment.GetEnvironmentVariable(\"APPSETTING_Tenant\")\r\n  let clientId = Environment.GetEnvironmentVariable(\"APPSETTING_ClientId\")\r\n  let clientSecret =  Environment.GetEnvironmentVariable(\"APPSETTING_ClientSecret\")\r\n  let webHookUrl = \"https://\" + Environment.GetEnvironmentVariable(\"WEBSITE_HOSTNAME\") + \"/api/Notify\"\r\n\r\n  let authId = clientId\r\n  let jwt = fetchAuthToken clientId clientSecret tenant\r\n  let token = \"Bearer \" + jwt\r\n  let tenantId = JsonValue.Parse(JsonWebToken.Decode(jwt, \"\", false)).[\"tid\"].AsString()\r\n\r\n  let subscribe' = subscribe log webHookUrl authId tenantId token\r\n  subscribe' \"Audit.SharePoint\"\r\n  subscribe' \"Audit.Exchange\"\r\n  subscribe' \"Audit.AzureActiveDirectory\"\r\n  subscribe' \"Audit.General\""
            }
          }
        }
      ]
    }
  ],
  "outputs": { }
}
